// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ItemAddToSell extends ethereum.Event {
  get params(): ItemAddToSell__Params {
    return new ItemAddToSell__Params(this);
  }
}

export class ItemAddToSell__Params {
  _event: ItemAddToSell;

  constructor(event: ItemAddToSell) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ItemBought extends ethereum.Event {
  get params(): ItemBought__Params {
    return new ItemBought__Params(this);
  }
}

export class ItemBought__Params {
  _event: ItemBought;

  constructor(event: ItemBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ItemRemoveFromSell extends ethereum.Event {
  get params(): ItemRemoveFromSell__Params {
    return new ItemRemoveFromSell__Params(this);
  }
}

export class ItemRemoveFromSell__Params {
  _event: ItemRemoveFromSell;

  constructor(event: ItemRemoveFromSell) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NftSale__getItemsResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class NftSale extends ethereum.SmartContract {
  static bind(address: Address): NftSale {
    return new NftSale("NftSale", address);
  }

  getItems(
    nftAddress: Address,
    tokenId: BigInt
  ): NftSale__getItemsResultValue0Struct {
    let result = super.call(
      "getItems",
      "getItems(address,uint256):((uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<NftSale__getItemsResultValue0Struct>(result[0].toTuple());
  }

  try_getItems(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<NftSale__getItemsResultValue0Struct> {
    let result = super.tryCall(
      "getItems",
      "getItems(address,uint256):((uint256,address,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftSale__getItemsResultValue0Struct>(value[0].toTuple())
    );
  }

  getProceeds(seller: Address): BigInt {
    let result = super.call("getProceeds", "getProceeds(address):(uint256)", [
      ethereum.Value.fromAddress(seller)
    ]);

    return result[0].toBigInt();
  }

  try_getProceeds(seller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProceeds",
      "getProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(seller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddItemForSellCall extends ethereum.Call {
  get inputs(): AddItemForSellCall__Inputs {
    return new AddItemForSellCall__Inputs(this);
  }

  get outputs(): AddItemForSellCall__Outputs {
    return new AddItemForSellCall__Outputs(this);
  }
}

export class AddItemForSellCall__Inputs {
  _call: AddItemForSellCall;

  constructor(call: AddItemForSellCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddItemForSellCall__Outputs {
  _call: AddItemForSellCall;

  constructor(call: AddItemForSellCall) {
    this._call = call;
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class RemoveItemFromSellCall extends ethereum.Call {
  get inputs(): RemoveItemFromSellCall__Inputs {
    return new RemoveItemFromSellCall__Inputs(this);
  }

  get outputs(): RemoveItemFromSellCall__Outputs {
    return new RemoveItemFromSellCall__Outputs(this);
  }
}

export class RemoveItemFromSellCall__Inputs {
  _call: RemoveItemFromSellCall;

  constructor(call: RemoveItemFromSellCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveItemFromSellCall__Outputs {
  _call: RemoveItemFromSellCall;

  constructor(call: RemoveItemFromSellCall) {
    this._call = call;
  }
}
